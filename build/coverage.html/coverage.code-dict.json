{"/home/travis/build/npmtest/node-npmtest-light-orm/test.js":"/* istanbul instrument in package npmtest_light_orm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-light-orm/lib.npmtest_light_orm.js":"/* istanbul instrument in package npmtest_light_orm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_light_orm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_light_orm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-light-orm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-light-orm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_light_orm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_light_orm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_light_orm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_light_orm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_light_orm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_light_orm.__dirname + '/lib.npmtest_light_orm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-light-orm/node_modules/light-orm/index.js":"/**\r\n* Interface to CRUD operations\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n/**\r\n* Interface to Driver\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n/**\r\n* Interface to GET/SET operations\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n/**\r\n* Interface to JSON transformation\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n/**\r\n* Interface to String transformation\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n/**\r\n* Interface to where block\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n/**\r\n* Clones object\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\nvar Clone = (function () {\r\n    function Clone(data) {\r\n        this.data = data;\r\n        return this.clone();\r\n    }\r\n    Clone.prototype.clone = function () {\r\n        if (null === this.data || \"object\" !== typeof this.data) {\r\n            return this.data;\r\n        }\r\n\r\n        var copy = this.data.constructor() || {};\r\n\r\n        for (var attr in this.data) {\r\n            if (this.data.hasOwnProperty(attr)) {\r\n                copy[attr] = this.data[attr];\r\n            }\r\n        }\r\n\r\n        return copy;\r\n    };\r\n    return Clone;\r\n})();\r\n/**\r\n* Filter object on property names\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\nvar Filter = (function () {\r\n    /**\r\n    * @param {object} data Object, that should be filtered\r\n    */\r\n    function Filter(data) {\r\n        this.data = data;\r\n    }\r\n    /**\r\n    * @param Names of properties, that should stay in object\r\n    * @returns {{}}\r\n    */\r\n    Filter.prototype.filter = function (names) {\r\n        var newData = {};\r\n\r\n        for (var name in this.data) {\r\n            if (this.data.hasOwnProperty(name)) {\r\n                newData[name] = this.data[name];\r\n            }\r\n        }\r\n\r\n        return newData;\r\n    };\r\n\r\n    /**\r\n    * this.data MINUS data\r\n    * @param data2\r\n    * @returns {{}}\r\n    */\r\n    Filter.prototype.minus = function (data2) {\r\n        var newData = {};\r\n\r\n        for (var name in this.data) {\r\n            if (this.data.hasOwnProperty(name) && !data2.hasOwnProperty(name)) {\r\n                newData[name] = this.data[name];\r\n            }\r\n        }\r\n\r\n        return newData;\r\n    };\r\n    return Filter;\r\n})();\r\n/**\r\n* Adds some functionality to object or array\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\nvar ObjectWrapper = (function () {\r\n    function ObjectWrapper(data) {\r\n        this.data = data;\r\n    }\r\n    ObjectWrapper.prototype.size = function () {\r\n        if (this.isArray()) {\r\n            return this.data.length;\r\n        } else {\r\n            return Object.keys(this.data).length;\r\n        }\r\n    };\r\n\r\n    ObjectWrapper.prototype.isArray = function () {\r\n        if (Object.prototype.toString.call(this.data) === '[object Array]') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n    return ObjectWrapper;\r\n})();\r\n/**\r\n* Interface to update/delete selection options\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n///<reference path=\"../interfaces/WhereInterface.ts\" />\r\nvar Where = (function () {\r\n    function Where(where) {\r\n        this.where = where.where;\r\n        this.whereValue = where.whereValue;\r\n    }\r\n    /**\r\n    * Generate object with data, that will be used for filtering in WHERE block\r\n    * @param data Data from Model\r\n    * @returns {{}}\r\n    */\r\n    Where.prototype.getBlock = function (data) {\r\n        var obj = {};\r\n\r\n        if (\"undefined\" !== typeof this.where) {\r\n            for (var i = 0; i < this.where.length; i++) {\r\n                if (data.hasOwnProperty(this.where[i])) {\r\n                    obj[this.where[i]] = data[this.where[i]];\r\n                }\r\n            }\r\n        } else {\r\n            obj = this.whereValue;\r\n        }\r\n\r\n        return obj;\r\n    };\r\n    return Where;\r\n})();\r\n/**\r\n* Escape string methods\r\n* https://github.com/felixge/node-mysql/blob/master/lib/protocol/SqlString.js\r\n*/\r\n\r\nvar SqlString = (function () {\r\n    function SqlString() {\r\n    }\r\n    SqlString.getEntity = function () {\r\n        if (\"undefined\" === typeof SqlString.entity) {\r\n            SqlString.entity = new SqlString();\r\n        }\r\n\r\n        return SqlString.entity;\r\n    };\r\n\r\n    SqlString.prototype.convertTimezone = function (tz) {\r\n        if (tz == \"Z\")\r\n            return 0;\r\n\r\n        var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\r\n\r\n        if (m) {\r\n            return (m[1] == '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\r\n        }\r\n\r\n        return 0;\r\n    };\r\n\r\n    SqlString.prototype.zeroPad = function (vnumber, vlength) {\r\n        var snumber = vnumber.toString();\r\n\r\n        while (snumber.length < vlength) {\r\n            snumber = '0' + snumber;\r\n        }\r\n\r\n        return snumber;\r\n    };\r\n\r\n    SqlString.prototype.dateToString = function (dt, timeZone) {\r\n        if (timeZone != 'local') {\r\n            var tz = this.convertTimezone(timeZone);\r\n\r\n            dt.setTime(dt.getTime() + (dt.getTimezoneOffset() * 60000));\r\n            if (!tz) {\r\n                dt.setTime(dt.getTime() + (tz * 60000));\r\n            }\r\n        }\r\n\r\n        var year = dt.getFullYear();\r\n        var month = this.zeroPad(dt.getMonth() + 1, 2);\r\n        var day = this.zeroPad(dt.getDate(), 2);\r\n        var hour = this.zeroPad(dt.getHours(), 2);\r\n        var minute = this.zeroPad(dt.getMinutes(), 2);\r\n        var second = this.zeroPad(dt.getSeconds(), 2);\r\n        var millisecond = this.zeroPad(dt.getMilliseconds(), 3);\r\n\r\n        return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + '.' + millisecond;\r\n    };\r\n\r\n    SqlString.prototype.bufferToString = function (buffer) {\r\n        var hex = '';\r\n\r\n        try  {\r\n            hex = buffer.toString('hex');\r\n        } catch (err) {\r\n            for (var i = 0; i < buffer.length; i++) {\r\n                var vbyte = +buffer[i];\r\n                hex += this.zeroPad(vbyte.toString(16));\r\n            }\r\n        }\r\n\r\n        return \"X'\" + hex + \"'\";\r\n    };\r\n\r\n    SqlString.prototype.arrayToList = function (array, timeZone) {\r\n        var _this = this;\r\n        return array.map(function (v) {\r\n            if (Array.isArray(v)) {\r\n                return '(' + _this.arrayToList(v, timeZone) + ')';\r\n            }\r\n            return _this.escape(v, true, timeZone);\r\n        }).join(', ');\r\n    };\r\n\r\n    SqlString.prototype.objectToValues = function (object, timeZone) {\r\n        var values = [];\r\n        for (var key in object) {\r\n            var value = object[key];\r\n            if (typeof value === 'function') {\r\n                continue;\r\n            }\r\n\r\n            values.push(this.escapeId(key) + ' = ' + this.escape(value, true, timeZone));\r\n        }\r\n\r\n        return values.join(', ');\r\n    };\r\n\r\n    SqlString.prototype.escapeId = function (val, forbidQualified) {\r\n        var _this = this;\r\n        if (\"undefined\" === typeof forbidQualified) {\r\n            forbidQualified = false;\r\n        }\r\n\r\n        if (Array.isArray(val)) {\r\n            return val.map(function (v) {\r\n                return _this.escapeId(v, forbidQualified);\r\n            }).join(', ');\r\n        }\r\n\r\n        if (forbidQualified) {\r\n            return '`' + val.replace(/`/g, '``') + '`';\r\n        }\r\n\r\n        return '`' + val.replace(/`/g, '``').replace(/\\./g, '`.`') + '`';\r\n    };\r\n\r\n    SqlString.prototype.escape = function (val, stringifyObjects, timeZone) {\r\n        if (val === undefined || val === null) {\r\n            return 'NULL';\r\n        }\r\n\r\n        switch (typeof val) {\r\n            case 'boolean':\r\n                return (val) ? 'true' : 'false';\r\n            case 'number':\r\n                return val + '';\r\n        }\r\n\r\n        if (val instanceof Date) {\r\n            val = this.dateToString(val, timeZone || 'local');\r\n        }\r\n\r\n        if (Buffer.isBuffer(val)) {\r\n            return this.bufferToString(val);\r\n        }\r\n\r\n        if (Array.isArray(val)) {\r\n            return this.arrayToList(val, timeZone);\r\n        }\r\n\r\n        if (typeof val === 'object') {\r\n            if (stringifyObjects) {\r\n                val = val.toString();\r\n            } else {\r\n                return this.objectToValues(val, timeZone);\r\n            }\r\n        }\r\n\r\n        val = val.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, function (s) {\r\n            switch (s) {\r\n                case \"\\0\":\r\n                    return \"\\\\0\";\r\n                case \"\\n\":\r\n                    return \"\\\\n\";\r\n                case \"\\r\":\r\n                    return \"\\\\r\";\r\n                case \"\\b\":\r\n                    return \"\\\\b\";\r\n                case \"\\t\":\r\n                    return \"\\\\t\";\r\n                case \"\\x1a\":\r\n                    return \"\\\\Z\";\r\n                default:\r\n                    return \"\\\\\" + s;\r\n            }\r\n        });\r\n        return \"'\" + val + \"'\";\r\n    };\r\n    return SqlString;\r\n})();\r\n/**\r\n* Provides user with basic SQL methods\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n///<reference path=\"SqlString.ts\" />\r\nvar SQLHelper = (function () {\r\n    function SQLHelper() {\r\n        this.sqlString = SqlString.getEntity();\r\n        this.separator = \", \";\r\n    }\r\n    SQLHelper.getEntity = function () {\r\n        if (\"undefined\" === typeof SQLHelper.entity) {\r\n            SQLHelper.entity = new SQLHelper();\r\n        }\r\n\r\n        return SQLHelper.entity;\r\n    };\r\n\r\n    SQLHelper.prototype.buildWhere = function (data) {\r\n        var query = \"\", joinString = \" AND \";\r\n\r\n        for (var name in data) {\r\n            if (data.hasOwnProperty(name)) {\r\n                query += \"`\" + name + \"` = \" + this.sqlString.escape(data[name]) + joinString;\r\n            }\r\n        }\r\n\r\n        if (query.length > 0) {\r\n            query = query.substring(0, query.length - joinString.length);\r\n        }\r\n\r\n        return query;\r\n    };\r\n\r\n    SQLHelper.prototype.buildAttrs = function (data, keys) {\r\n        var query = \"\";\r\n\r\n        if (\"undefined\" === typeof keys) {\r\n            keys = true;\r\n        }\r\n\r\n        if (keys) {\r\n            for (var name in data) {\r\n                if (data.hasOwnProperty(name)) {\r\n                    //                    query += \"`\" + name + \"`\"\r\n                    //                        + this.separator;\r\n                    query += this.sqlString.escapeId(name) + this.separator;\r\n                }\r\n            }\r\n        } else {\r\n            for (var name in data) {\r\n                if (data.hasOwnProperty(name)) {\r\n                    //                    query += \"'\" + data[name] + \"'\"\r\n                    //                        + this.separator;\r\n                    query += this.sqlString.escape(data[name]) + this.separator;\r\n                }\r\n            }\r\n        }\r\n\r\n        //TODO: use join\r\n        if (query.length > 0) {\r\n            query = query.substring(0, query.length - this.separator.length);\r\n        }\r\n\r\n        return query;\r\n    };\r\n\r\n    /**\r\n    * Create SELECT SQL query\r\n    * @param {string} tableName\r\n    * @param {object} whereData Conditions for WHERE block in query\r\n    * @returns {string} Query\r\n    */\r\n    SQLHelper.prototype.buildSelect = function (tableName, whereData) {\r\n        var query = \"SELECT * FROM `\" + tableName + \"`\";\r\n\r\n        if (\"undefined\" !== typeof whereData) {\r\n            query += \" WHERE \";\r\n            query += this.buildWhere(whereData);\r\n        }\r\n\r\n        return query;\r\n    };\r\n\r\n    /**\r\n    * Create UPDATE SQL query\r\n    * @param {string} tableName\r\n    * @param {string} valuesData Field names and values that should be updated\r\n    * @param {object} whereData Conditions for WHERE block in query\r\n    * @returns {string} Query\r\n    */\r\n    SQLHelper.prototype.buildUpdate = function (tableName, valuesData, whereData) {\r\n        var query = \"UPDATE `\" + tableName + \"`\" + \" SET \";\r\n\r\n        for (var name in valuesData) {\r\n            if (valuesData.hasOwnProperty(name)) {\r\n                query += this.sqlString.escapeId(name) + \"= \" + this.sqlString.escape(valuesData[name]) + this.separator;\r\n            }\r\n        }\r\n\r\n        query = query.substring(0, query.length - this.separator.length);\r\n\r\n        if (\"undefined\" !== typeof whereData) {\r\n            query += \" WHERE \";\r\n            query += this.buildWhere(whereData);\r\n        }\r\n\r\n        return query;\r\n    };\r\n\r\n    /**\r\n    * Create INSERT SQL query\r\n    * @param {string} tableName\r\n    * @param {string} valuesData Fieldnames and values that should be inserted\r\n    * @returns {string} Query\r\n    */\r\n    SQLHelper.prototype.buildInsert = function (tableName, valuesData) {\r\n        var query = \"INSERT INTO `\" + tableName + \"` (\";\r\n\r\n        query += this.buildAttrs(valuesData, true);\r\n        query += \") VALUES \";\r\n        query += \" (\";\r\n        query += this.buildAttrs(valuesData, false);\r\n        query += \")\";\r\n\r\n        return query;\r\n    };\r\n\r\n    /**\r\n    * Create DELETE SQL query\r\n    * @param {string} tableName\r\n    * @param {object} whereData Conditions for WHERE block in query\r\n    * @returns {string} Query\r\n    */\r\n    SQLHelper.prototype.buildDelete = function (tableName, whereData) {\r\n        var query = \"DELETE FROM `\" + tableName + \"`\";\r\n\r\n        if (\"undefined\" !== typeof whereData) {\r\n            query += \" WHERE \";\r\n            query += this.buildWhere(whereData);\r\n        }\r\n\r\n        return query;\r\n    };\r\n    return SQLHelper;\r\n})();\r\n///<reference path=\"interfaces/DriverInterface.ts\" />\r\nvar Light;\r\n(function (Light) {\r\n    /**\r\n    * @param {object} connector Connection object to DB with method query(query: string, handler: (err, rows, fields) => void)\r\n    */\r\n    Light.driver;\r\n})(Light || (Light = {}));\r\n/**\r\n* Interface to before/after event setters\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n/**\r\n* Provides basic model methods\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n///<reference path=\"interfaces/CrudInterface.ts\" />\r\n///<reference path=\"interfaces/GetSetInterface.ts\" />\r\n///<reference path=\"interfaces/ModelEventInterface.ts\" />\r\n///<reference path=\"interfaces/ToStringInterface.ts\" />\r\n///<reference path=\"interfaces/ToJSONInterface.ts\" />\r\n///<reference path=\"helpers/Sql/SQLHelper.ts\" />\r\n///<reference path=\"helpers/Where.ts\" />\r\n///<reference path=\"helpers/Clone.ts\" />\r\n///<reference path=\"helpers/Filter.ts\" />\r\n///<reference path=\"helpers/ObjectWrapper.ts\" />\r\n///<reference path=\"Driver.ts\" />\r\nvar Light;\r\n(function (Light) {\r\n    var Model = (function () {\r\n        /**\r\n        * Constructor\r\n        * @param {object} attributes Attributes, that will be setted during construction\r\n        * @param {object} extensions New properties for current entity\r\n        * @param tableName\r\n        */\r\n        function Model(options, attributes, extensions) {\r\n            //        public static CREATE = 'create';\r\n            //        public static UPDATE = 'update';\r\n            //        public static REMOVE = 'remove';\r\n            this.pkAttr = 'id';\r\n            this.data = {};\r\n            this.dataNew = {};\r\n            if (\"undefined\" !== typeof options && options.hasOwnProperty('connector')) {\r\n                for (var name in options) {\r\n                    this[name] = options[name];\r\n                }\r\n            } else {\r\n                this.tableName = options;\r\n\r\n                if (\"undefined\" !== typeof attributes) {\r\n                    this.data = attributes;\r\n                }\r\n\r\n                if (\"undefined\" !== typeof extensions) {\r\n                    for (var name in extensions) {\r\n                        this[name] = extensions[name];\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.sqlHelper = SQLHelper.getEntity();\r\n        }\r\n        /**\r\n        * Get All attributes, combines dataNew and data\r\n        * @returns {object}\r\n        */\r\n        Model.prototype.getAll = function () {\r\n            var localData = new Clone(this.data) || {};\r\n\r\n            for (var name in this.dataNew) {\r\n                if (this.dataNew.hasOwnProperty(name) && (!localData.hasOwnProperty(name) || localData[name] != this.dataNew[name])) {\r\n                    localData[name] = this.dataNew[name];\r\n                }\r\n            }\r\n\r\n            return localData;\r\n        };\r\n\r\n        /**\r\n        * Get attribute by name\r\n        * @param {string} name Name of attribute\r\n        * @returns {any} Value of attribute\r\n        */\r\n        Model.prototype.get = function (name) {\r\n            if (this.dataNew.hasOwnProperty(name)) {\r\n                return this.dataNew[name];\r\n            }\r\n\r\n            if (this.data.hasOwnProperty(name)) {\r\n                return this.data[name];\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        /**\r\n        * Check presence of attribute\r\n        * @param name\r\n        * @returns {boolean}\r\n        */\r\n        Model.prototype.has = function (name) {\r\n            if (this.dataNew.hasOwnProperty(name)) {\r\n                return true;\r\n            }\r\n\r\n            if (this.data.hasOwnProperty(name)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        Model.prototype.set = function (arg1, arg2, isNew) {\r\n            if (\"string\" === typeof arg1 && \"undefined\" !== typeof arg2) {\r\n                if (\"undefined\" === typeof isNew || isNew) {\r\n                    this.dataNew[arg1] = arg2;\r\n                } else {\r\n                    this.data[arg1] = arg2;\r\n                }\r\n            }\r\n\r\n            if (\"object\" === typeof arg1) {\r\n                if (\"boolean\" === typeof arg2 && arg2) {\r\n                    for (var name in arg1) {\r\n                        if (arg1.hasOwnProperty(name)) {\r\n                            this.dataNew[name] = arg1[name];\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (var name in arg1) {\r\n                        if (arg1.hasOwnProperty(name)) {\r\n                            this.data[name] = arg1[name];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        Model.prototype.clear = function (name) {\r\n            if (\"undefined\" === typeof name) {\r\n                this.dataNew = {};\r\n                this.data = {};\r\n            } else {\r\n                if (this.dataNew.hasOwnProperty(name)) {\r\n                    delete this.dataNew[name];\r\n                }\r\n\r\n                if (this.data.hasOwnProperty(name)) {\r\n                    delete this.data[name];\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n        * Create model\r\n        * @param {function} callback\r\n        * @param {boolean} isGetModel True, if sub request is needed\r\n        */\r\n        Model.prototype.create = function (callback, isGetModel) {\r\n            var _this = this;\r\n            var that = this, query = this.sqlHelper.buildInsert(this.tableName, this.getAll());\r\n\r\n            if (\"undefined\" === typeof isGetModel) {\r\n                isGetModel = true;\r\n            }\r\n\r\n            Light.driver.query(query, function (err, rows, fields) {\r\n                if (isGetModel) {\r\n                    var whereOptions = _this.getAll();\r\n                    query = _this.sqlHelper.buildSelect(_this.tableName, whereOptions);\r\n                    Light.driver.query(query, function (err, rows, fields) {\r\n                        if (\"undefined\" !== typeof rows && rows.length > 0) {\r\n                            var model = new Model(_this.tableName, rows[0]);\r\n                            that.set(model.getAll());\r\n\r\n                            if (\"function\" === typeof callback) {\r\n                                callback(err, that);\r\n                            }\r\n                        } else {\r\n                            if (\"function\" === typeof callback) {\r\n                                callback(err);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (\"function\" === typeof callback) {\r\n                        callback(err);\r\n                    }\r\n                }\r\n            });\r\n            //            this.callBeforeHandlers(Model.CREATE);\r\n            //            this.connector.query(query, (err, rows, fields) => {\r\n            //                this.callAfterHandlers(Model.CREATE);\r\n            //            });\r\n        };\r\n\r\n        Model.prototype.update = function (input, callback, isGetModel) {\r\n            var _this = this;\r\n            var that = this, whereOptions = {}, options;\r\n\r\n            if (\"function\" === typeof input) {\r\n                callback = input;\r\n            } else {\r\n                options = input;\r\n            }\r\n\r\n            if (\"undefined\" === typeof options) {\r\n                whereOptions[this.pkAttr] = this.get(this.pkAttr);\r\n            } else {\r\n                whereOptions = new Where(options).getBlock(this.getAll());\r\n            }\r\n\r\n            var updateData = new Clone(this.dataNew);\r\n\r\n            this.data = this.getAll();\r\n            this.dataNew = {};\r\n\r\n            if (new ObjectWrapper(updateData).size() < 1) {\r\n                if (\"function\" === typeof callback) {\r\n                    callback(\"Nothing to update\");\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            var query = this.sqlHelper.buildUpdate(this.tableName, updateData, whereOptions);\r\n\r\n            if (\"undefined\" === typeof isGetModel) {\r\n                if (\"boolean\" === typeof callback) {\r\n                    isGetModel = callback;\r\n                } else {\r\n                    isGetModel = true;\r\n                }\r\n            }\r\n\r\n            Light.driver.query(query, function (err, rows, fields) {\r\n                if (isGetModel) {\r\n                    var whereOptions = _this.getAll();\r\n                    query = _this.sqlHelper.buildSelect(_this.tableName, whereOptions);\r\n                    Light.driver.query(query, function (err, rows, fields) {\r\n                        if (\"undefined\" !== typeof rows && rows.length > 0) {\r\n                            var model = new Model(_this.tableName, rows[0]);\r\n                            that.set(model.getAll());\r\n\r\n                            if (\"function\" === typeof callback) {\r\n                                callback(err, that);\r\n                            }\r\n                        } else {\r\n                            if (\"function\" === typeof callback) {\r\n                                callback(err);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (\"function\" === typeof callback) {\r\n                        callback(err);\r\n                    }\r\n                }\r\n            });\r\n            //            this.callBeforeHandlers(Model.UPDATE);\r\n            //            this.connector.query(query, (err, rows, fields) => {\r\n            //                this.callAfterHandlers(Model.UPDATE);\r\n            //            });\r\n        };\r\n\r\n        Model.prototype.remove = function (input, callback, isGetModel) {\r\n            var _this = this;\r\n            var that = this, whereOptions = {}, options;\r\n\r\n            if (\"function\" === typeof input) {\r\n                callback = input;\r\n            } else {\r\n                options = input;\r\n            }\r\n\r\n            if (\"undefined\" === typeof options) {\r\n                whereOptions[this.pkAttr] = this.get(this.pkAttr);\r\n            } else {\r\n                whereOptions = new Where(options).getBlock(this.getAll());\r\n            }\r\n\r\n            var query = this.sqlHelper.buildDelete(this.tableName, whereOptions);\r\n\r\n            if (\"undefined\" === typeof isGetModel) {\r\n                if (\"boolean\" === typeof callback) {\r\n                    isGetModel = callback;\r\n                } else {\r\n                    isGetModel = true;\r\n                }\r\n            }\r\n\r\n            Light.driver.query(query, function (err, rows, fields) {\r\n                if (isGetModel) {\r\n                    var whereOptions = _this.getAll();\r\n                    query = _this.sqlHelper.buildSelect(_this.tableName, whereOptions);\r\n                    Light.driver.query(query, function (err, rows, fields) {\r\n                        if (\"undefined\" !== typeof rows && rows.length > 0) {\r\n                            var model = new Model(_this.tableName, rows[0]);\r\n                            that.set(model.getAll());\r\n\r\n                            if (\"function\" === typeof callback) {\r\n                                callback(err, that);\r\n                            }\r\n                        } else {\r\n                            if (\"function\" === typeof callback) {\r\n                                callback(err);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (\"function\" === typeof callback) {\r\n                        callback(err);\r\n                    }\r\n                }\r\n            });\r\n            //            this.callBeforeHandlers(Model.REMOVE);\r\n            //            this.connector.query(query, (err, rows, fields) => {\r\n            //                this.callAfterHandlers(Model.REMOVE);\r\n            //            });\r\n        };\r\n\r\n        /**\r\n        * Create string from object\r\n        * @returns {string}\r\n        */\r\n        Model.prototype.toString = function () {\r\n            return \"[LightOrm Model <\" + this.tableName + \", \" + (this.get(this.pkAttr) ? this.get(this.pkAttr) : \"undefined\") + \">]\";\r\n        };\r\n\r\n        /**\r\n        * Get attributes of model\r\n        * @returns {object}\r\n        */\r\n        Model.prototype.toJSON = function () {\r\n            return this.getAll();\r\n        };\r\n        return Model;\r\n    })();\r\n    Light.Model = Model;\r\n})(Light || (Light = {}));\r\n/**\r\n* Provides model creation and search methods\r\n* @author Oleksandr Knyga <oleksandrknyga@gmail.com>\r\n* @license Apache License 2.0 - See file 'LICENSE.md' in this project.\r\n*/\r\n///<reference path=\"Model.ts\" />\r\n///<reference path=\"Driver.ts\" />\r\n///<reference path=\"helpers/Sql/SQLHelper.ts\" />\r\n///<reference path=\"interfaces/ToStringInterface.ts\" />\r\n///<reference path=\"interfaces/ToJSONInterface.ts\" />\r\nvar Light;\r\n(function (Light) {\r\n    var Collection = (function () {\r\n        function Collection(options, extensions) {\r\n            this.models = [];\r\n            this.isAddModel = true;\r\n            if (\"string\" === typeof options) {\r\n                this.tableName = options;\r\n\r\n                if (\"undefined\" !== typeof extensions) {\r\n                    for (var name in extensions) {\r\n                        this[name] = extensions[name];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (\"object\" === typeof options) {\r\n                if (Object.prototype.toString.call(options) === '[object Array]') {\r\n                    if (options.length > 0 && options[0] instanceof Light.Model) {\r\n                        this.models = options;\r\n                    } else {\r\n                        for (var i = 0; i < options.length; i++) {\r\n                            this.createModel(options[i]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (var name in options) {\r\n                        this[name] = options[name];\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.sqlHelper = SQLHelper.getEntity();\r\n        }\r\n        Collection.prototype.createModel = function (options, add) {\r\n            var model, data;\r\n\r\n            if (\"boolean\" === typeof options) {\r\n                add = options;\r\n            } else {\r\n                data = options;\r\n            }\r\n\r\n            if (\"undefined\" === typeof add) {\r\n                add = this.isAddModel;\r\n            }\r\n\r\n            model = new Light.Model(this.tableName, data, this.modelExtension);\r\n\r\n            if (add) {\r\n                this.models.push(model);\r\n            }\r\n\r\n            return model;\r\n        };\r\n\r\n        /**\r\n        * Get all models from saved models list\r\n        * @returns {Model[]}\r\n        */\r\n        Collection.prototype.getModels = function () {\r\n            return this.models;\r\n        };\r\n\r\n        /**\r\n        * Get model at position from saved models list\r\n        * @param {number} at Position\r\n        * @returns {Model}\r\n        */\r\n        Collection.prototype.getModel = function (at) {\r\n            if (this.models.length <= at) {\r\n                //throw new Error(\"No model at \" + at);\r\n                return null;\r\n            }\r\n\r\n            return this.models[at];\r\n        };\r\n\r\n        Collection.prototype.find = function (search, callback) {\r\n            var _this = this;\r\n            var query = \"\";\r\n\r\n            if (\"string\" === typeof search) {\r\n                query = search;\r\n            } else {\r\n                query = this.sqlHelper.buildSelect(this.tableName, search);\r\n            }\r\n\r\n            Light.driver.query(query, function (err, rows, fields) {\r\n                if (err) {\r\n                    if (\"function\" === typeof callback) {\r\n                        callback(err);\r\n                    }\r\n                } else {\r\n                    var models = [];\r\n\r\n                    for (var i = 0; i < rows.length; i++) {\r\n                        var model = new Light.Model(_this.tableName, rows[i], _this.modelExtension);\r\n                        models.push(model);\r\n                    }\r\n\r\n                    if (\"function\" === typeof callback) {\r\n                        callback(null, models);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n        * Get all models\r\n        * @param callback\r\n        */\r\n        Collection.prototype.findAll = function (callback) {\r\n            this.find(undefined, callback);\r\n        };\r\n\r\n        Collection.prototype.findOne = function (search, callback) {\r\n            this.find(search, function (lerr, lmodels) {\r\n                var model;\r\n\r\n                if (lmodels.length > 0) {\r\n                    model = lmodels[0];\r\n                }\r\n\r\n                if (\"function\" === typeof callback) {\r\n                    callback(lerr, model);\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n        * Create string from object\r\n        * @returns {string}\r\n        */\r\n        Collection.prototype.toString = function () {\r\n            return \"[LightOrm Collection <\" + this.tableName + \">]\";\r\n        };\r\n\r\n        /**\r\n        * Create array of attributes of saved models\r\n        * @returns {array}\r\n        */\r\n        Collection.prototype.toJSON = function () {\r\n            var data = [];\r\n            for (var i = 0, length = this.models.length; i < length; i++) {\r\n                data.push(this.models[i].toJSON());\r\n            }\r\n\r\n            return data;\r\n        };\r\n        return Collection;\r\n    })();\r\n    Light.Collection = Collection;\r\n})(Light || (Light = {}));\r\nmodule.exports = Light;\r\n"}